apply plugin: 'com.android.library'

dependencies {
    compile project(':libnetcipher')

    androidTestCompile "com.android.support:multidex:1.0.3"
    androidTestCompile "junit:junit:4.12"
    androidTestCompile "com.android.support.test:runner:1.0.2"
    androidTestCompile "com.android.support.test:rules:1.0.2"
    androidTestCompile "com.android.support.test.espresso:espresso-core:3.0.2"
    androidTestCompile "org.nanohttpd:nanohttpd:2.2.0"
    androidTestCompile "net.lightbody.bmp:browsermob-core:2.1.5"
}

android {
    compileSdkVersion 24
    buildToolsVersion '27.0.3'
    useLibrary 'org.apache.http.legacy'

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest {
            manifest.srcFile 'androidTest/AndroidManifest.xml'
            java.srcDirs = ['androidTest/src']
        }

        defaultConfig {
            testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        }

        dexOptions {
            // tests have massive dependencies and
            // building on api-level < 22 requires a ton of memory
            javaMaxHeapSize "1536m"
        }
    }

    lintOptions {
        htmlReport true
        xmlReport false
        textReport false
    }

    defaultConfig {
        multiDexEnabled true
    }

    packagingOptions {
        pickFirst  'META-INF/license.txt'
        pickFirst  'META-INF/LICENSE'
    }

}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile, sourcesJar, javadocJar, createPom
    task.from variant.javaCompile.destinationDir
    task.exclude('info/guardianproject/**/BuildConfig.**')
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    options.addStringOption('notimestamp')
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply plugin: 'maven'

task createPom << {
    pom {
        project {
            name 'NetCipher WebKit'
            inceptionYear '2012'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo(project.getBuildDir().toString() + "/libs/" + project.name + "-" + project.version + ".pom")
}
